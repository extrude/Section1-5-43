Desktop\Web Design\Courses\Complete_React_Course\Section1-5-43
// Type $r in console to view the global variable it is present for all components 
  if you are in the react developer tool console and click on a react componenet
  then switch to the console & type $r, you can view each components global variable that way to see all props & state.

// Babel yarn project react setup
//command to launch live server once in the directory that will lead to the folder with index.html file lunch this command
live-server folderNameWithHTMLfile

//Install babel cli globably
npm install -g babel-cli@6.24.1

//include babel in project by launching this command in project folder 
yarn init

//(delete node_moduels folder & reinstall it)Install dependice presets into project folder http://babeljs.io/docs/plugins/preset-env/ for presets
yarn add babel-preset-react@6.24.1 babel-preset-env@1.5.2

// Take jsx code and compile it to react
babel src/app.js --out-file=public/scripts/app.js --presets=env,react 

// Added with the watch flag will watch for changes in the src folder and add automatically to the scripts folder
babel src/app.js --out-file=public/scripts/app.js --presets=env,react --watch

// If a react project is downloaded the node_modules folder will not come with it. To get that folder back launch
yarn install
// Then launch the babel command and the depencies will load into the node_modules folder

-----------------------------------------------------------------------------
Quest to replace depencies: replace global moduels with local moduels 
1. npm uninstall -g babel-cli live-server (for yarn its yarn)
2. yarn add live-server babel-cli@6.24.1 ( Add depencies to project folder by launching within project folder)
3. Build the object in package.json file above depencies to launch commands as scripts
"scripts": {
        "serve": "live-server public/",
        "build": "babel src/app.js --out-file=public/scripts/app.js --presets=env,react --watch"
    },
4. Launch the scripts on terminal to use while inside of both directories with yarn run <scriptName>
yarn run serve
yarn run build
now every time build is ran all the scripts get ran and are watched for updates

To run webpack you must have a webpack.config.js file in the file you can take advantage of 
import export modules. You must provide the import entry & output what files are being taken in & 
when combining what file is the output path. 
---------------------------------------------------------------------------------------------------
Importing npm moduels
Step1.Install:  yarn add validator@10.1.0 to project folder
Step2.Import: import name from name || import name from './name'
 - When using ./ it searches for relative files when using from name without ./ relative files
  webpack will look for the same name in the node modules folder
Step3.Use:  import validator from 'validator';
 console.log(validator.isEmail('3fucks@yahoo.com'));
 Search npm validator
 -------------------------------------------------------
 Adding npm react libraries
 Search npm react
 search npm react-dom 
 Step1. Install: yarn add react@16.3.2 react-dom@16.3.2
Step2. Import: import React from 'react';
import ReactDOM from 'react-dom';
Step3. Use: now you can use the react library and access react-dom but we do not have support for jsx
 - To use babel with webpack we need to access a loader which lets you customize a file with webpack. It is a way a file gets transformed when webpack uses it.
 - So we will use it with babel to convert es6 to es5 and jsx to javascript

 babel-core allows you to run tools from webpack while babel-cli allows you to run tools from command line
babel-loader is a babel plugin & allows us to teach webpack how to run babel when webpack sees certain files
yarn add babel-core@6.26.3 babel-loader@7.1.4
.........................................................................
We can use webpack module.rules & rules allows you to setup how you want webpack to handle your loader through an array















// instal Mobx preset
 npm install --save-dev babel-preset-mobx
// Via cli
babel script.js --presets mobx
//.bablerc
{
  "presets": ["mobx"]
}